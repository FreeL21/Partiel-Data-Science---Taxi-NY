{
  "cells": [
    {
      "metadata": {
        "_uuid": "eb215bbb77762d7d2d8e9073fae3506d4350eb38"
      },
      "cell_type": "markdown",
      "source": "# Importing the magic stuff"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "b810fedd153f8d18b10ba514e3e0099b6e31377f"
      },
      "cell_type": "code",
      "source": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import cross_val_score, train_test_split\n\n%matplotlib inline",
      "execution_count": 1,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "c5b0c824cf9cdc288a217449dab44c08f78bd72e"
      },
      "cell_type": "markdown",
      "source": "# Data exploration"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ba35d683c5f57fe48b59a8dec72408dcf6e9d059"
      },
      "cell_type": "code",
      "source": "df_train = pd.read_csv('../input/train.csv')\ndf_test = pd.read_csv('../input/test.csv')",
      "execution_count": 2,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "eaa364bd567cc0ad93013f1c9cccab90f6148b15"
      },
      "cell_type": "code",
      "source": "df_train.head()",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 3,
          "data": {
            "text/plain": "          id  vendor_id      ...      store_and_fwd_flag trip_duration\n0  id2875421          2      ...                       N           455\n1  id2377394          1      ...                       N           663\n2  id3858529          2      ...                       N          2124\n3  id3504673          2      ...                       N           429\n4  id2181028          2      ...                       N           435\n\n[5 rows x 11 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>vendor_id</th>\n      <th>pickup_datetime</th>\n      <th>dropoff_datetime</th>\n      <th>passenger_count</th>\n      <th>pickup_longitude</th>\n      <th>pickup_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>dropoff_latitude</th>\n      <th>store_and_fwd_flag</th>\n      <th>trip_duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>id2875421</td>\n      <td>2</td>\n      <td>2016-03-14 17:24:55</td>\n      <td>2016-03-14 17:32:30</td>\n      <td>1</td>\n      <td>-73.982155</td>\n      <td>40.767937</td>\n      <td>-73.964630</td>\n      <td>40.765602</td>\n      <td>N</td>\n      <td>455</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>id2377394</td>\n      <td>1</td>\n      <td>2016-06-12 00:43:35</td>\n      <td>2016-06-12 00:54:38</td>\n      <td>1</td>\n      <td>-73.980415</td>\n      <td>40.738564</td>\n      <td>-73.999481</td>\n      <td>40.731152</td>\n      <td>N</td>\n      <td>663</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>id3858529</td>\n      <td>2</td>\n      <td>2016-01-19 11:35:24</td>\n      <td>2016-01-19 12:10:48</td>\n      <td>1</td>\n      <td>-73.979027</td>\n      <td>40.763939</td>\n      <td>-74.005333</td>\n      <td>40.710087</td>\n      <td>N</td>\n      <td>2124</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>id3504673</td>\n      <td>2</td>\n      <td>2016-04-06 19:32:31</td>\n      <td>2016-04-06 19:39:40</td>\n      <td>1</td>\n      <td>-74.010040</td>\n      <td>40.719971</td>\n      <td>-74.012268</td>\n      <td>40.706718</td>\n      <td>N</td>\n      <td>429</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>id2181028</td>\n      <td>2</td>\n      <td>2016-03-26 13:30:55</td>\n      <td>2016-03-26 13:38:10</td>\n      <td>1</td>\n      <td>-73.973053</td>\n      <td>40.793209</td>\n      <td>-73.972923</td>\n      <td>40.782520</td>\n      <td>N</td>\n      <td>435</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "00d7dc705f5135da2d192c1eb3ea7133cabb6208"
      },
      "cell_type": "code",
      "source": "df_train.size\n\n# Holy Pepperoni, that's big",
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": "16045084"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "bb34c652c5015f6a7e7d2be62d0d8df5f0614a54"
      },
      "cell_type": "code",
      "source": "print(df_train.columns)\n\n# in order to get an idea of the futur features to take in count for the prediction\n# ... and because I love to print columns anyway, hope you don't mind",
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Index(['id', 'vendor_id', 'pickup_datetime', 'dropoff_datetime',\n       'passenger_count', 'pickup_longitude', 'pickup_latitude',\n       'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag',\n       'trip_duration'],\n      dtype='object')\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "851a4c59a310fb840411c380f60547294d5df6fb"
      },
      "cell_type": "code",
      "source": "df_train.info()",
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1458644 entries, 0 to 1458643\nData columns (total 11 columns):\nid                    1458644 non-null object\nvendor_id             1458644 non-null int64\npickup_datetime       1458644 non-null object\ndropoff_datetime      1458644 non-null object\npassenger_count       1458644 non-null int64\npickup_longitude      1458644 non-null float64\npickup_latitude       1458644 non-null float64\ndropoff_longitude     1458644 non-null float64\ndropoff_latitude      1458644 non-null float64\nstore_and_fwd_flag    1458644 non-null object\ntrip_duration         1458644 non-null int64\ndtypes: float64(4), int64(3), object(4)\nmemory usage: 122.4+ MB\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "f08a68b0af12d03abfbb021ac081e51147c9a0c6"
      },
      "cell_type": "markdown",
      "source": "# Further exploration"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "1fbdbb4141f420cb768709d8df3328a6b51dc46a"
      },
      "cell_type": "code",
      "source": "df_train.isna().sum()",
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "id                    0\nvendor_id             0\npickup_datetime       0\ndropoff_datetime      0\npassenger_count       0\npickup_longitude      0\npickup_latitude       0\ndropoff_longitude     0\ndropoff_latitude      0\nstore_and_fwd_flag    0\ntrip_duration         0\ndtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "0c2e2ad4bc4a88ebf7de74da1158195807c2e476"
      },
      "cell_type": "code",
      "source": "df_train.isnull().sum()\n\n# a data with no NaN value, what is this sorcery",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 8,
          "data": {
            "text/plain": "id                    0\nvendor_id             0\npickup_datetime       0\ndropoff_datetime      0\npassenger_count       0\npickup_longitude      0\npickup_latitude       0\ndropoff_longitude     0\ndropoff_latitude      0\nstore_and_fwd_flag    0\ntrip_duration         0\ndtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c7abd13acc985324495233ba9ce4bfa905705214"
      },
      "cell_type": "code",
      "source": "# just to be sure\n\ndf_train.duplicated().sum()\n\n# sweet",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "0"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "5315ab0ec738786e9d0cf9f462c0a53d19b0be7f"
      },
      "cell_type": "markdown",
      "source": "# Data cleaning"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "9c23c3ffcaee8c39a575d71d2686116fb5e0e329"
      },
      "cell_type": "code",
      "source": "# First things first, we need to get rid of outliers in the trip duration feature\n\nplt.subplots(figsize=(20,10))\nplt.title(\"Top Outliers repartition in the trip duration feature\")\nprint(df_train.boxplot())",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": "AxesSubplot(0.125,0.125;0.775x0.755)\n",
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 1440x720 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "727ec36c8c872d5b99d900c617074ae1b71f17ad"
      },
      "cell_type": "code",
      "source": "# 1 minute of silence for the people who forgot to turn off the taxi counter\n# We have to get rid of these values in order to make correct predictions\n\ndf_train = df_train.loc[df_train['trip_duration']< 500000]\n\n# The \"top\" outliers are the easiest to deal with. It gets more complicated with the \"bottom\" outliers\n# In the following, we will consider any trip duration below 5 minutes as outliers\n# haters gonna hate, I know, who would take the taxi for a trip duration less than 5 minutes anyway\n\ndf_train = df_train.loc[(df_train['trip_duration'] > 300) & (df_train['trip_duration'] < 500000)]",
      "execution_count": 11,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c405a9bd8478603e421d639b4d274d218004ac54"
      },
      "cell_type": "code",
      "source": "# Now we also need to get rid of outliers in the geographical place data section where people are picked up\n\nprint(df_train.plot.scatter(x='pickup_longitude',y='pickup_latitude'))",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": "AxesSubplot(0.125,0.125;0.775x0.755)\n",
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "b2fdff4e10073601d40a77793703393d395f6eb3"
      },
      "cell_type": "code",
      "source": "df_train = df_train.loc[(df_train['pickup_longitude']> -90) & (df_train['pickup_latitude']< 45)]",
      "execution_count": 13,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "e9892bad7f6eff5aa42fb6638603d3e328030f7f"
      },
      "cell_type": "code",
      "source": "# Same goes with the place people are dropped off\n\nprint(df_train.plot.scatter(x='dropoff_longitude',y='dropoff_latitude'))",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": "AxesSubplot(0.125,0.125;0.775x0.755)\n",
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "9bfc6abac8e7b0a0930ca207c6928a5a3d60188b"
      },
      "cell_type": "code",
      "source": "df_train = df_train.loc[(df_train['dropoff_longitude']> -82.5) & (df_train['dropoff_latitude']> 35)]",
      "execution_count": 15,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "16bd130aa5a793e54b0e7adf70e1fb592ea93560"
      },
      "cell_type": "code",
      "source": "# In prevision of the prediction model, we are going to create 2 more features, Time and Distance\n\ndf_train['Time'] = df_train['pickup_datetime'].apply(lambda x: int(x.split()[1][0:2]))\n\ndf_train['Distance'] = np.sqrt((df_train['pickup_latitude']-df_train['dropoff_latitude'])**2 \n                               + (df_train['pickup_longitude']-df_train['dropoff_longitude'])**2) ",
      "execution_count": 16,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "9c7b3c216d6c0996103284d7b4fa3cf3f5d90671"
      },
      "cell_type": "markdown",
      "source": "# Features selection and extraction"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "114c0256ffadc74b638937bc0a80d01965ae9278"
      },
      "cell_type": "code",
      "source": "y = df_train[\"trip_duration\"] # <-- target\nX = df_train[[\"passenger_count\", \"pickup_longitude\", \"pickup_latitude\", \"dropoff_longitude\",\"dropoff_latitude\",\"Time\",\"Distance\"]] # <-- features\nX_train, X_valid, y_train, y_valid = train_test_split(X,y, test_size=0.2, random_state=42)\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape",
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 17,
          "data": {
            "text/plain": "((989375, 7), (247344, 7), (989375,), (247344,))"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "4ec9671436eeaf24521628a0643f2eafd3dea7cd"
      },
      "cell_type": "code",
      "source": "m1 = RandomForestRegressor()\nm1.fit(X_train, y_train)",
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": "/opt/conda/lib/python3.6/site-packages/sklearn/ensemble/forest.py:246: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "execution_count": 18,
          "data": {
            "text/plain": "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n           max_features='auto', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=1, min_samples_split=2,\n           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=None,\n           oob_score=False, random_state=None, verbose=0, warm_start=False)"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "e1c509dd8f1ba1672f891a337d2b69a5e4f38a7c"
      },
      "cell_type": "markdown",
      "source": "# Validation"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "cf435d942a9011af2794dd586b4af84cd6bf4045"
      },
      "cell_type": "code",
      "source": "m1_scores = cross_val_score(m1, X, y, cv=5, scoring =\"neg_mean_squared_log_error\")\nm1_scores",
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "array([-0.24601963, -0.24297722, -0.24398805, -0.24321227, -0.24119647])"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "3126b90095405d6d1e986ae96991ea06519ecbce"
      },
      "cell_type": "code",
      "source": "for i in range(len(m1_scores)):\n    m1_scores[i] = np.sqrt(abs(m1_scores[i]))\nprint(m1_scores)\nprint(np.mean(m1_scores))",
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": "[0.49600366 0.4929272  0.49395146 0.49316556 0.49111757]\n0.49343308789877954\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ee9bbb0a3a8cea047ef7b58d3a0510c2582fa642"
      },
      "cell_type": "code",
      "source": "df_test['Time'] = df_test['pickup_datetime'].apply(lambda x: int(x.split()[1][0:2]))\n\ndf_test['Distance'] = np.sqrt((df_test['pickup_latitude']-df_test['dropoff_latitude'])**2 + (df_test['pickup_longitude']-df_test['dropoff_longitude'])**2) \ndf_test.head()",
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 23,
          "data": {
            "text/plain": "          id  vendor_id    ...    Time  Distance\n0  id3004672          1    ...      23  0.024735\n1  id3505355          1    ...      23  0.024979\n2  id1217141          1    ...      23  0.013861\n3  id2150126          2    ...      23  0.051363\n4  id1598245          1    ...      23  0.010343\n\n[5 rows x 11 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>vendor_id</th>\n      <th>pickup_datetime</th>\n      <th>passenger_count</th>\n      <th>pickup_longitude</th>\n      <th>pickup_latitude</th>\n      <th>dropoff_longitude</th>\n      <th>dropoff_latitude</th>\n      <th>store_and_fwd_flag</th>\n      <th>Time</th>\n      <th>Distance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>id3004672</td>\n      <td>1</td>\n      <td>2016-06-30 23:59:58</td>\n      <td>1</td>\n      <td>-73.988129</td>\n      <td>40.732029</td>\n      <td>-73.990173</td>\n      <td>40.756680</td>\n      <td>N</td>\n      <td>23</td>\n      <td>0.024735</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>id3505355</td>\n      <td>1</td>\n      <td>2016-06-30 23:59:53</td>\n      <td>1</td>\n      <td>-73.964203</td>\n      <td>40.679993</td>\n      <td>-73.959808</td>\n      <td>40.655403</td>\n      <td>N</td>\n      <td>23</td>\n      <td>0.024979</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>id1217141</td>\n      <td>1</td>\n      <td>2016-06-30 23:59:47</td>\n      <td>1</td>\n      <td>-73.997437</td>\n      <td>40.737583</td>\n      <td>-73.986160</td>\n      <td>40.729523</td>\n      <td>N</td>\n      <td>23</td>\n      <td>0.013861</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>id2150126</td>\n      <td>2</td>\n      <td>2016-06-30 23:59:41</td>\n      <td>1</td>\n      <td>-73.956070</td>\n      <td>40.771900</td>\n      <td>-73.986427</td>\n      <td>40.730469</td>\n      <td>N</td>\n      <td>23</td>\n      <td>0.051363</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>id1598245</td>\n      <td>1</td>\n      <td>2016-06-30 23:59:33</td>\n      <td>1</td>\n      <td>-73.970215</td>\n      <td>40.761475</td>\n      <td>-73.961510</td>\n      <td>40.755890</td>\n      <td>N</td>\n      <td>23</td>\n      <td>0.010343</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "fc1db391567adc59e68c3061591d43a3286afdae"
      },
      "cell_type": "code",
      "source": "X_test = df_test[[\"passenger_count\", \"pickup_longitude\", \"pickup_latitude\", \"dropoff_longitude\",\"dropoff_latitude\",\"Time\",\"Distance\"]]\npredicted_duration = m1.predict(X_test)\nprint(predicted_duration)",
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": "[ 743.9  804.3  580.8 ... 1598.5 1688.7 1104.2]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "fa99b32dc0cf134a12bed8ec66653688643fd73f"
      },
      "cell_type": "code",
      "source": "My_Submission = pd.DataFrame({'id': df_test.id, 'trip_duration': predicted_duration})\nprint(My_Submission)",
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": "               id  trip_duration\n0       id3004672          743.9\n1       id3505355          804.3\n2       id1217141          580.8\n3       id2150126          925.1\n4       id1598245          448.6\n5       id0668992          916.8\n6       id1765014         1186.2\n7       id0898117          822.5\n8       id3905224         2288.0\n9       id1543102          573.4\n10      id3024712          920.1\n11      id3665810          468.4\n12      id1836461          390.5\n13      id3457080          566.6\n14      id3376065         1096.6\n15      id3008739          579.8\n16      id0902216         1193.6\n17      id3564824          463.4\n18      id0820280          486.6\n19      id0775088         1122.6\n20      id1468488          471.9\n21      id2657479          390.5\n22      id1262719          561.1\n23      id1345524         1070.4\n24      id2911638          883.9\n25      id2849512         1415.9\n26      id0236829          471.5\n27      id2905906          394.5\n28      id3737939         1132.0\n29      id0766179         1750.9\n...           ...            ...\n625104  id0120169         9029.8\n625105  id0386349          427.9\n625106  id1962532          770.3\n625107  id0335207          389.2\n625108  id0273508         1474.4\n625109  id2936770          511.9\n625110  id0044526          439.5\n625111  id3605431          599.3\n625112  id2681896          422.2\n625113  id3308448          503.5\n625114  id2108525          556.0\n625115  id3952220         2283.7\n625116  id2771348          540.0\n625117  id3065313         1693.9\n625118  id2332834         1771.3\n625119  id3495407          526.5\n625120  id3811106          415.2\n625121  id2693698          401.3\n625122  id2884571          397.1\n625123  id2790343         1103.7\n625124  id1901191          812.7\n625125  id0664662         9169.8\n625126  id2073829          395.2\n625127  id0328287          411.4\n625128  id1340822          444.9\n625129  id3008929          402.3\n625130  id3700764         1250.1\n625131  id2568735         1598.5\n625132  id1384355         1688.7\n625133  id0621643         1104.2\n\n[625134 rows x 2 columns]\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "b887b8a691579276a064f72f6bf8318f975128b6"
      },
      "cell_type": "code",
      "source": "My_Submission.to_csv('submission.csv', index=False)",
      "execution_count": 28,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "817236d71f7f29ac80352cb9210894952fe5569e"
      },
      "cell_type": "markdown",
      "source": "### Thanks for the time you spent reading this Kernel. I'm completely new to machine learning and this is my first attempt on a Kaggle dataset. If you have any suggestion on how I can improve myself, please feel free to share it ! "
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}
